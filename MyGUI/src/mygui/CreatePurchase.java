/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mygui;

import java.awt.List;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class CreatePurchase extends javax.swing.JFrame {

    /**
     * Creates new form CreatePurchase
     */
    ResultSet results;
    int showRow = 0;
    public static int recieptID = 1;

    public CreatePurchase() {
        initComponents();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchByList = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        searchBox = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chooseTable = new javax.swing.JTable();
        searchList = new javax.swing.JComboBox<>();
        chooseButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Yu Gothic Light", 1, 36)); // NOI18N
        jLabel1.setText("Create Purchase");

        searchByList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "ID", "Name", "Type", "Amount", "Price" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Search");

        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        chooseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(chooseTable);

        chooseButton.setText("Choose");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        moveUpButton.setText("Move up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Purchase List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchByList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchList, 0, 459, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(177, 177, 177)
                                        .addComponent(jLabel3)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(chooseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(deleteButton)
                        .addGap(24, 24, 24)
                        .addComponent(moveUpButton)
                        .addGap(18, 18, 18)
                        .addComponent(moveDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        this.setForSearch((String) searchByList.getSelectedItem(), searchBox.getText());
    }//GEN-LAST:event_searchButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        String chooseId = "";
        chooseId = (String) searchList.getSelectedItem();
        int end = 0;
        for (int i = 0; i < chooseId.length(); i++) {
            if (chooseId.charAt(i) == 32) {
                end = i;
                break;
            }
        }
        chooseId = chooseId.substring(0, end);
        this.addToTable(chooseId);
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        this.deleteSelectedRow();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        this.moveUpwards();
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        this.moveDownwards();
    }//GEN-LAST:event_moveDownButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreatePurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreatePurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreatePurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreatePurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreatePurchase().setVisible(true);
            }
        });
    }

    public void addToTable(String data) {
        int showCol = 0;
        int input = Integer.parseInt(JOptionPane.showInputDialog("Please input the quantity"));

        String sql = "select * from Stock where productID = '" + data + "'";
        System.out.println(sql);
        try {
            Connection con = StockAndAccountSystem.getConnect();
            Statement stm = con.createStatement();
            results = stm.executeQuery(sql);
            String proId, proName, price, type;
            while (results.next()) {
                int j = 0;
                proId = results.getString(1);
                proName = results.getString(2);
                price = results.getString(4);
                type = results.getString(5);
                chooseTable.setValueAt(proId, showRow, j);
                j++;
                chooseTable.setValueAt(proName, showRow, j);
                j++;
                chooseTable.setValueAt(type, showRow, j);
                j++;
                chooseTable.setValueAt(price, showRow, j);
                j++;
                chooseTable.setValueAt(input, showRow, j);
                j++;
            }

            JOptionPane.showMessageDialog(null, "Record Inserted Successfully");
        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }

        showRow++;
    }

    public void editQuantity() {
//        int row1 = chooseTable.getSelectedRow();
//        int row2 = quantityTable.getSelectedRow();
//        if (row1 > -1) {
//            int input = Integer.parseInt(JOptionPane.showInputDialog("Please input the quantity"));
//            quantityTable.setValueAt(input, row1, 0);
//        } else if (row2 > -1) {
//            int input = Integer.parseInt(JOptionPane.showInputDialog("Please input the quantity"));
//            quantityTable.setValueAt(input, row2, 0);
//        } else {
//            JOptionPane.showMessageDialog(null, "Please select a record!");
//        }
    }

    public void deleteSelectedRow() {
        int row = chooseTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a record!");
        } else {
            chooseTable.setValueAt("", row, 0);

        }
    }

    public void moveUpwards() {
        moveRowBy(-1);
    }

    public void moveDownwards() {
        moveRowBy(1);
    }

    private void moveRowBy(int by) {
        DefaultTableModel model = (DefaultTableModel) chooseTable.getModel();
        int[] rows = chooseTable.getSelectedRows();
        int destination = rows[0] + by;
        int rowCount = model.getRowCount();
        if (destination < 0 || destination >= rowCount) {
            return;
        }

        model.moveRow(rows[0], rows[rows.length - 1], destination);
        chooseTable.setRowSelectionInterval(rows[0] + by, rows[rows.length - 1] + by);
    }

    public static void clearTable(JTable table) {
        for (int i = 0; i < table.getRowCount(); i++) {
            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt("", i, j);
            }
        }
    }

    public void showData() {
        searchList.removeAllItems();
        String sql = "select * from APP.STOCK";
        try {
            Connection con = StockAndAccountSystem.getConnect();
            Statement stm = con.createStatement();
            results = stm.executeQuery(sql);
            String proId, proName, amount, price, type;
            while (results.next()) {
                proId = results.getString(1);
                proName = results.getString(2);
                amount = results.getString(3);
                price = results.getString(4);
                type = results.getString(5);
                searchList.addItem(proId + "    " + proName);
            }
        } catch (Exception e) {
            System.out.println("Connect failed ! ");
        }
    }

    String proId, proName, amount, price, type;

    public void setForSearch(String searchBy, String word) {
        searchList.removeAllItems();
        String sql = "";
        if (searchBy.equalsIgnoreCase("All")) {
            sql = "select * from APP.STOCK";
        } else if (searchBy.equalsIgnoreCase("ID")) {
            sql = "select * from APP.STOCK where productID like '%" + word + "%' order by productID";
        } else if (searchBy.equalsIgnoreCase("Name")) {
            sql = "select * from APP.STOCK where productName like '%" + word + "%' order by productID";
        } else if (searchBy.equalsIgnoreCase("Type")) {
            sql = "select * from APP.STOCK where productType like '%" + word + "%' order by productID";
        } else if (searchBy.equalsIgnoreCase("Amount")) {
            int wordInt = Integer.parseInt(word);
            sql = "select * from APP.STOCK where amount = " + wordInt + " order by productID";
        } else if (searchBy.equalsIgnoreCase("Price")) {
            double wordDb = Double.parseDouble(word);
            sql = "select * from APP.STOCK where price = " + wordDb + " order by productID";
        }

        try {
            Connection con = StockAndAccountSystem.getConnect();
            Statement stm = con.createStatement();
            results = stm.executeQuery(sql);
            String proId, proName, amount, price, type;
            while (results.next()) {
                proId = results.getString(1);
                proName = results.getString(2);
                amount = results.getString(3);
                price = results.getString(4);
                type = results.getString(5);
                searchList.addItem(proId + "    " + proName + "    " + amount + "    " + price + "    " + type);
            }
        } catch (Exception e) {
            System.out.println("Connection failed ! ");
        }
    }

    public String getCurrentDate() {
        LocalDate localDate = LocalDate.now();
        return DateTimeFormatter.ofPattern("dd/MM/yyyy").format(localDate);
    }

    public void addToDatabase() {
        String sql;
        for (int i = 0; i < chooseTable.getRowCount(); i++) {
            int j = 0;
            while (j < chooseTable.getColumnCount()) {
                sql = "insert into APP.SALEREPORT2 values ('"
                        + recieptID + "', '" + chooseTable.getValueAt(i, j++) + "', " + chooseTable.getValueAt(i, j++) + ", "
                        + chooseTable.getValueAt(i, j++) + ", '" + getCurrentDate() + "')";
                try {
                    Connection con = StockAndAccountSystem.getConnect();
                    Statement stm = con.createStatement();
                    stm.executeUpdate(sql);
                    JOptionPane.showMessageDialog(null, "Record Inserted Successfully");
                } catch (SQLException ex) {
                    Logger.getLogger(CreatePurchase.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        //System.out.println(sql);
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JTable chooseTable;
    private javax.swing.JButton confirmButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchByList;
    private javax.swing.JComboBox<String> searchList;
    // End of variables declaration//GEN-END:variables
}
